#version 150

in vec2 pass_textureCoordinates;

in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;

in float visibility;

out vec4 out_Color;

uniform sampler2D modelTexture;

uniform float shineDamper;
uniform float reflectivity;

uniform vec3 skyColour;
uniform vec3 lightColour[4];
uniform vec3 attenuation[4];

const float levels = 3.0;
const float minimumDiffuse = 0.2;
const float alphaThreshold = 0.5;

void main(void) {
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVectorToCamera = normalize(toCameraVector);
    
    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);
    
    for (int i = 0; i < 4; i++) {
        float distance = length(toLightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
        
        vec3 unitLightVector = normalize(toLightVector[i]);
        float nDotl = dot(unitNormal, unitLightVector);
        float brightness = max(nDotl, 0.0);
        
        // Cel Shading (commented out)
        // float level = floor(brightness * levels);
        // brightness = level / levels;
        
        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
        
        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        
        specularFactor = max(specularFactor, 0.0);
        
        float dampedFactor = pow(specularFactor, shineDamper);
        
        // Cel Shading (commented out)
        // level = floor(dampedFactor * levels);
        // dampedFactor = level / levels;
        
        totalDiffuse += (brightness * lightColour[i]) / attFactor;
        totalSpecular += (dampedFactor * reflectivity * lightColour[i]) / attFactor;
    }
    
    totalDiffuse = max(totalDiffuse, minimumDiffuse);
    
    vec4 textureColour = texture(modelTexture, pass_textureCoordinates);
    
    if (textureColour.a < alphaThreshold) {
        discard;
    }

    out_Color = mix(vec4(skyColour, 1.0), vec4(totalDiffuse, 1.0) * texture(modelTexture, pass_textureCoordinates) + vec4(totalSpecular, 1.0), visibility);
}
